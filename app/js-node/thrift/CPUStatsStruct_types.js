//
// Autogenerated by Thrift Compiler (0.9.1)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//
var Thrift = require('thrift').Thrift;

var ttypes = module.exports = {};
if (typeof js === 'undefined') {
  js = {};
}
if (typeof js.droid_stalker === 'undefined') {
  js.droid_stalker = {};
}
if (typeof js.droid_stalker.thrift === 'undefined') {
  js.droid_stalker.thrift = {};
}
js.droid_stalker.thrift.CPUStatsStruct = module.exports.CPUStatsStruct = function(args) {
  this.totalCPU = null;
  this.pidCPU = null;
  this.pid = null;
  if (args) {
    if (args.totalCPU !== undefined) {
      this.totalCPU = args.totalCPU;
    }
    if (args.pidCPU !== undefined) {
      this.pidCPU = args.pidCPU;
    }
    if (args.pid !== undefined) {
      this.pid = args.pid;
    }
  }
};
js.droid_stalker.thrift.CPUStatsStruct.prototype = {};
js.droid_stalker.thrift.CPUStatsStruct.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.DOUBLE) {
        this.totalCPU = input.readDouble();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.DOUBLE) {
        this.pidCPU = input.readDouble();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.pid = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

js.droid_stalker.thrift.CPUStatsStruct.prototype.write = function(output) {
  output.writeStructBegin('CPUStatsStruct');
  if (this.totalCPU !== null && this.totalCPU !== undefined) {
    output.writeFieldBegin('totalCPU', Thrift.Type.DOUBLE, 1);
    output.writeDouble(this.totalCPU);
    output.writeFieldEnd();
  }
  if (this.pidCPU !== null && this.pidCPU !== undefined) {
    output.writeFieldBegin('pidCPU', Thrift.Type.DOUBLE, 2);
    output.writeDouble(this.pidCPU);
    output.writeFieldEnd();
  }
  if (this.pid !== null && this.pid !== undefined) {
    output.writeFieldBegin('pid', Thrift.Type.I32, 3);
    output.writeI32(this.pid);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

