//
// Autogenerated by Thrift Compiler (0.9.1)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//
var Thrift = require('thrift').Thrift;

var ttypes = module.exports = {};
if (typeof js === 'undefined') {
  js = {};
}
if (typeof js.droid_stalker === 'undefined') {
  js.droid_stalker = {};
}
if (typeof js.droid_stalker.thrift === 'undefined') {
  js.droid_stalker.thrift = {};
}
js.droid_stalker.thrift.ThreadInfoStruct = module.exports.ThreadInfoStruct = function(args) {
  this.threadId = null;
  this.name = null;
  this.status = null;
  this.timeId = null;
  this.upTime = null;
  this.startTime = null;
  this.isDaemon = null;
  this.traceTime = null;
  this.stackTrace = null;
  if (args) {
    if (args.threadId !== undefined) {
      this.threadId = args.threadId;
    }
    if (args.name !== undefined) {
      this.name = args.name;
    }
    if (args.status !== undefined) {
      this.status = args.status;
    }
    if (args.timeId !== undefined) {
      this.timeId = args.timeId;
    }
    if (args.upTime !== undefined) {
      this.upTime = args.upTime;
    }
    if (args.startTime !== undefined) {
      this.startTime = args.startTime;
    }
    if (args.isDaemon !== undefined) {
      this.isDaemon = args.isDaemon;
    }
    if (args.traceTime !== undefined) {
      this.traceTime = args.traceTime;
    }
    if (args.stackTrace !== undefined) {
      this.stackTrace = args.stackTrace;
    }
  }
};
js.droid_stalker.thrift.ThreadInfoStruct.prototype = {};
js.droid_stalker.thrift.ThreadInfoStruct.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.threadId = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.status = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I32) {
        this.timeId = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.I32) {
        this.upTime = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.I32) {
        this.startTime = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.BOOL) {
        this.isDaemon = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.I64) {
        this.traceTime = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 9:
      if (ftype == Thrift.Type.STRING) {
        this.stackTrace = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

js.droid_stalker.thrift.ThreadInfoStruct.prototype.write = function(output) {
  output.writeStructBegin('ThreadInfoStruct');
  if (this.threadId !== null && this.threadId !== undefined) {
    output.writeFieldBegin('threadId', Thrift.Type.I32, 1);
    output.writeI32(this.threadId);
    output.writeFieldEnd();
  }
  if (this.name !== null && this.name !== undefined) {
    output.writeFieldBegin('name', Thrift.Type.STRING, 2);
    output.writeString(this.name);
    output.writeFieldEnd();
  }
  if (this.status !== null && this.status !== undefined) {
    output.writeFieldBegin('status', Thrift.Type.I32, 3);
    output.writeI32(this.status);
    output.writeFieldEnd();
  }
  if (this.timeId !== null && this.timeId !== undefined) {
    output.writeFieldBegin('timeId', Thrift.Type.I32, 4);
    output.writeI32(this.timeId);
    output.writeFieldEnd();
  }
  if (this.upTime !== null && this.upTime !== undefined) {
    output.writeFieldBegin('upTime', Thrift.Type.I32, 5);
    output.writeI32(this.upTime);
    output.writeFieldEnd();
  }
  if (this.startTime !== null && this.startTime !== undefined) {
    output.writeFieldBegin('startTime', Thrift.Type.I32, 6);
    output.writeI32(this.startTime);
    output.writeFieldEnd();
  }
  if (this.isDaemon !== null && this.isDaemon !== undefined) {
    output.writeFieldBegin('isDaemon', Thrift.Type.BOOL, 7);
    output.writeBool(this.isDaemon);
    output.writeFieldEnd();
  }
  if (this.traceTime !== null && this.traceTime !== undefined) {
    output.writeFieldBegin('traceTime', Thrift.Type.I64, 8);
    output.writeI64(this.traceTime);
    output.writeFieldEnd();
  }
  if (this.stackTrace !== null && this.stackTrace !== undefined) {
    output.writeFieldBegin('stackTrace', Thrift.Type.STRING, 9);
    output.writeString(this.stackTrace);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

