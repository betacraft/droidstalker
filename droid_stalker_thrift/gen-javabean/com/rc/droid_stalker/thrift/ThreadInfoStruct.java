/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.rc.droid_stalker.thrift;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

/**
 * ThreadInfo structure
 */
public class ThreadInfoStruct implements org.apache.thrift.TBase<ThreadInfoStruct, ThreadInfoStruct._Fields>, java.io.Serializable, Cloneable, Comparable<ThreadInfoStruct> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ThreadInfoStruct");

  private static final org.apache.thrift.protocol.TField THREAD_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("threadId", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("name", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField STATUS_FIELD_DESC = new org.apache.thrift.protocol.TField("status", org.apache.thrift.protocol.TType.I32, (short)3);
  private static final org.apache.thrift.protocol.TField TIME_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("timeId", org.apache.thrift.protocol.TType.I32, (short)4);
  private static final org.apache.thrift.protocol.TField UP_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("upTime", org.apache.thrift.protocol.TType.I32, (short)5);
  private static final org.apache.thrift.protocol.TField START_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("startTime", org.apache.thrift.protocol.TType.I32, (short)6);
  private static final org.apache.thrift.protocol.TField IS_DAEMON_FIELD_DESC = new org.apache.thrift.protocol.TField("isDaemon", org.apache.thrift.protocol.TType.BOOL, (short)7);
  private static final org.apache.thrift.protocol.TField TRACE_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("traceTime", org.apache.thrift.protocol.TType.I64, (short)8);
  private static final org.apache.thrift.protocol.TField STACK_TRACE_FIELD_DESC = new org.apache.thrift.protocol.TField("stackTrace", org.apache.thrift.protocol.TType.STRING, (short)9);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new ThreadInfoStructStandardSchemeFactory());
    schemes.put(TupleScheme.class, new ThreadInfoStructTupleSchemeFactory());
  }

  private int threadId; // required
  private String name; // required
  private int status; // required
  private int timeId; // required
  private int upTime; // required
  private int startTime; // required
  private boolean isDaemon; // required
  private long traceTime; // required
  private String stackTrace; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    THREAD_ID((short)1, "threadId"),
    NAME((short)2, "name"),
    STATUS((short)3, "status"),
    TIME_ID((short)4, "timeId"),
    UP_TIME((short)5, "upTime"),
    START_TIME((short)6, "startTime"),
    IS_DAEMON((short)7, "isDaemon"),
    TRACE_TIME((short)8, "traceTime"),
    STACK_TRACE((short)9, "stackTrace");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // THREAD_ID
          return THREAD_ID;
        case 2: // NAME
          return NAME;
        case 3: // STATUS
          return STATUS;
        case 4: // TIME_ID
          return TIME_ID;
        case 5: // UP_TIME
          return UP_TIME;
        case 6: // START_TIME
          return START_TIME;
        case 7: // IS_DAEMON
          return IS_DAEMON;
        case 8: // TRACE_TIME
          return TRACE_TIME;
        case 9: // STACK_TRACE
          return STACK_TRACE;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __THREADID_ISSET_ID = 0;
  private static final int __STATUS_ISSET_ID = 1;
  private static final int __TIMEID_ISSET_ID = 2;
  private static final int __UPTIME_ISSET_ID = 3;
  private static final int __STARTTIME_ISSET_ID = 4;
  private static final int __ISDAEMON_ISSET_ID = 5;
  private static final int __TRACETIME_ISSET_ID = 6;
  private byte __isset_bitfield = 0;
  private _Fields optionals[] = {_Fields.STACK_TRACE};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.THREAD_ID, new org.apache.thrift.meta_data.FieldMetaData("threadId", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.NAME, new org.apache.thrift.meta_data.FieldMetaData("name", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.STATUS, new org.apache.thrift.meta_data.FieldMetaData("status", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.TIME_ID, new org.apache.thrift.meta_data.FieldMetaData("timeId", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.UP_TIME, new org.apache.thrift.meta_data.FieldMetaData("upTime", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.START_TIME, new org.apache.thrift.meta_data.FieldMetaData("startTime", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.IS_DAEMON, new org.apache.thrift.meta_data.FieldMetaData("isDaemon", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.TRACE_TIME, new org.apache.thrift.meta_data.FieldMetaData("traceTime", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.STACK_TRACE, new org.apache.thrift.meta_data.FieldMetaData("stackTrace", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ThreadInfoStruct.class, metaDataMap);
  }

  public ThreadInfoStruct() {
  }

  public ThreadInfoStruct(
    int threadId,
    String name,
    int status,
    int timeId,
    int upTime,
    int startTime,
    boolean isDaemon,
    long traceTime)
  {
    this();
    this.threadId = threadId;
    setThreadIdIsSet(true);
    this.name = name;
    this.status = status;
    setStatusIsSet(true);
    this.timeId = timeId;
    setTimeIdIsSet(true);
    this.upTime = upTime;
    setUpTimeIsSet(true);
    this.startTime = startTime;
    setStartTimeIsSet(true);
    this.isDaemon = isDaemon;
    setIsDaemonIsSet(true);
    this.traceTime = traceTime;
    setTraceTimeIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public ThreadInfoStruct(ThreadInfoStruct other) {
    __isset_bitfield = other.__isset_bitfield;
    this.threadId = other.threadId;
    if (other.isSetName()) {
      this.name = other.name;
    }
    this.status = other.status;
    this.timeId = other.timeId;
    this.upTime = other.upTime;
    this.startTime = other.startTime;
    this.isDaemon = other.isDaemon;
    this.traceTime = other.traceTime;
    if (other.isSetStackTrace()) {
      this.stackTrace = other.stackTrace;
    }
  }

  public ThreadInfoStruct deepCopy() {
    return new ThreadInfoStruct(this);
  }

  @Override
  public void clear() {
    setThreadIdIsSet(false);
    this.threadId = 0;
    this.name = null;
    setStatusIsSet(false);
    this.status = 0;
    setTimeIdIsSet(false);
    this.timeId = 0;
    setUpTimeIsSet(false);
    this.upTime = 0;
    setStartTimeIsSet(false);
    this.startTime = 0;
    setIsDaemonIsSet(false);
    this.isDaemon = false;
    setTraceTimeIsSet(false);
    this.traceTime = 0;
    this.stackTrace = null;
  }

  public int getThreadId() {
    return this.threadId;
  }

  public void setThreadId(int threadId) {
    this.threadId = threadId;
    setThreadIdIsSet(true);
  }

  public void unsetThreadId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __THREADID_ISSET_ID);
  }

  /** Returns true if field threadId is set (has been assigned a value) and false otherwise */
  public boolean isSetThreadId() {
    return EncodingUtils.testBit(__isset_bitfield, __THREADID_ISSET_ID);
  }

  public void setThreadIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __THREADID_ISSET_ID, value);
  }

  public String getName() {
    return this.name;
  }

  public void setName(String name) {
    this.name = name;
  }

  public void unsetName() {
    this.name = null;
  }

  /** Returns true if field name is set (has been assigned a value) and false otherwise */
  public boolean isSetName() {
    return this.name != null;
  }

  public void setNameIsSet(boolean value) {
    if (!value) {
      this.name = null;
    }
  }

  public int getStatus() {
    return this.status;
  }

  public void setStatus(int status) {
    this.status = status;
    setStatusIsSet(true);
  }

  public void unsetStatus() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __STATUS_ISSET_ID);
  }

  /** Returns true if field status is set (has been assigned a value) and false otherwise */
  public boolean isSetStatus() {
    return EncodingUtils.testBit(__isset_bitfield, __STATUS_ISSET_ID);
  }

  public void setStatusIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __STATUS_ISSET_ID, value);
  }

  public int getTimeId() {
    return this.timeId;
  }

  public void setTimeId(int timeId) {
    this.timeId = timeId;
    setTimeIdIsSet(true);
  }

  public void unsetTimeId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TIMEID_ISSET_ID);
  }

  /** Returns true if field timeId is set (has been assigned a value) and false otherwise */
  public boolean isSetTimeId() {
    return EncodingUtils.testBit(__isset_bitfield, __TIMEID_ISSET_ID);
  }

  public void setTimeIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TIMEID_ISSET_ID, value);
  }

  public int getUpTime() {
    return this.upTime;
  }

  public void setUpTime(int upTime) {
    this.upTime = upTime;
    setUpTimeIsSet(true);
  }

  public void unsetUpTime() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __UPTIME_ISSET_ID);
  }

  /** Returns true if field upTime is set (has been assigned a value) and false otherwise */
  public boolean isSetUpTime() {
    return EncodingUtils.testBit(__isset_bitfield, __UPTIME_ISSET_ID);
  }

  public void setUpTimeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __UPTIME_ISSET_ID, value);
  }

  public int getStartTime() {
    return this.startTime;
  }

  public void setStartTime(int startTime) {
    this.startTime = startTime;
    setStartTimeIsSet(true);
  }

  public void unsetStartTime() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __STARTTIME_ISSET_ID);
  }

  /** Returns true if field startTime is set (has been assigned a value) and false otherwise */
  public boolean isSetStartTime() {
    return EncodingUtils.testBit(__isset_bitfield, __STARTTIME_ISSET_ID);
  }

  public void setStartTimeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __STARTTIME_ISSET_ID, value);
  }

  public boolean isIsDaemon() {
    return this.isDaemon;
  }

  public void setIsDaemon(boolean isDaemon) {
    this.isDaemon = isDaemon;
    setIsDaemonIsSet(true);
  }

  public void unsetIsDaemon() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ISDAEMON_ISSET_ID);
  }

  /** Returns true if field isDaemon is set (has been assigned a value) and false otherwise */
  public boolean isSetIsDaemon() {
    return EncodingUtils.testBit(__isset_bitfield, __ISDAEMON_ISSET_ID);
  }

  public void setIsDaemonIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ISDAEMON_ISSET_ID, value);
  }

  public long getTraceTime() {
    return this.traceTime;
  }

  public void setTraceTime(long traceTime) {
    this.traceTime = traceTime;
    setTraceTimeIsSet(true);
  }

  public void unsetTraceTime() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TRACETIME_ISSET_ID);
  }

  /** Returns true if field traceTime is set (has been assigned a value) and false otherwise */
  public boolean isSetTraceTime() {
    return EncodingUtils.testBit(__isset_bitfield, __TRACETIME_ISSET_ID);
  }

  public void setTraceTimeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TRACETIME_ISSET_ID, value);
  }

  public String getStackTrace() {
    return this.stackTrace;
  }

  public void setStackTrace(String stackTrace) {
    this.stackTrace = stackTrace;
  }

  public void unsetStackTrace() {
    this.stackTrace = null;
  }

  /** Returns true if field stackTrace is set (has been assigned a value) and false otherwise */
  public boolean isSetStackTrace() {
    return this.stackTrace != null;
  }

  public void setStackTraceIsSet(boolean value) {
    if (!value) {
      this.stackTrace = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case THREAD_ID:
      if (value == null) {
        unsetThreadId();
      } else {
        setThreadId((Integer)value);
      }
      break;

    case NAME:
      if (value == null) {
        unsetName();
      } else {
        setName((String)value);
      }
      break;

    case STATUS:
      if (value == null) {
        unsetStatus();
      } else {
        setStatus((Integer)value);
      }
      break;

    case TIME_ID:
      if (value == null) {
        unsetTimeId();
      } else {
        setTimeId((Integer)value);
      }
      break;

    case UP_TIME:
      if (value == null) {
        unsetUpTime();
      } else {
        setUpTime((Integer)value);
      }
      break;

    case START_TIME:
      if (value == null) {
        unsetStartTime();
      } else {
        setStartTime((Integer)value);
      }
      break;

    case IS_DAEMON:
      if (value == null) {
        unsetIsDaemon();
      } else {
        setIsDaemon((Boolean)value);
      }
      break;

    case TRACE_TIME:
      if (value == null) {
        unsetTraceTime();
      } else {
        setTraceTime((Long)value);
      }
      break;

    case STACK_TRACE:
      if (value == null) {
        unsetStackTrace();
      } else {
        setStackTrace((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case THREAD_ID:
      return Integer.valueOf(getThreadId());

    case NAME:
      return getName();

    case STATUS:
      return Integer.valueOf(getStatus());

    case TIME_ID:
      return Integer.valueOf(getTimeId());

    case UP_TIME:
      return Integer.valueOf(getUpTime());

    case START_TIME:
      return Integer.valueOf(getStartTime());

    case IS_DAEMON:
      return Boolean.valueOf(isIsDaemon());

    case TRACE_TIME:
      return Long.valueOf(getTraceTime());

    case STACK_TRACE:
      return getStackTrace();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case THREAD_ID:
      return isSetThreadId();
    case NAME:
      return isSetName();
    case STATUS:
      return isSetStatus();
    case TIME_ID:
      return isSetTimeId();
    case UP_TIME:
      return isSetUpTime();
    case START_TIME:
      return isSetStartTime();
    case IS_DAEMON:
      return isSetIsDaemon();
    case TRACE_TIME:
      return isSetTraceTime();
    case STACK_TRACE:
      return isSetStackTrace();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof ThreadInfoStruct)
      return this.equals((ThreadInfoStruct)that);
    return false;
  }

  public boolean equals(ThreadInfoStruct that) {
    if (that == null)
      return false;

    boolean this_present_threadId = true;
    boolean that_present_threadId = true;
    if (this_present_threadId || that_present_threadId) {
      if (!(this_present_threadId && that_present_threadId))
        return false;
      if (this.threadId != that.threadId)
        return false;
    }

    boolean this_present_name = true && this.isSetName();
    boolean that_present_name = true && that.isSetName();
    if (this_present_name || that_present_name) {
      if (!(this_present_name && that_present_name))
        return false;
      if (!this.name.equals(that.name))
        return false;
    }

    boolean this_present_status = true;
    boolean that_present_status = true;
    if (this_present_status || that_present_status) {
      if (!(this_present_status && that_present_status))
        return false;
      if (this.status != that.status)
        return false;
    }

    boolean this_present_timeId = true;
    boolean that_present_timeId = true;
    if (this_present_timeId || that_present_timeId) {
      if (!(this_present_timeId && that_present_timeId))
        return false;
      if (this.timeId != that.timeId)
        return false;
    }

    boolean this_present_upTime = true;
    boolean that_present_upTime = true;
    if (this_present_upTime || that_present_upTime) {
      if (!(this_present_upTime && that_present_upTime))
        return false;
      if (this.upTime != that.upTime)
        return false;
    }

    boolean this_present_startTime = true;
    boolean that_present_startTime = true;
    if (this_present_startTime || that_present_startTime) {
      if (!(this_present_startTime && that_present_startTime))
        return false;
      if (this.startTime != that.startTime)
        return false;
    }

    boolean this_present_isDaemon = true;
    boolean that_present_isDaemon = true;
    if (this_present_isDaemon || that_present_isDaemon) {
      if (!(this_present_isDaemon && that_present_isDaemon))
        return false;
      if (this.isDaemon != that.isDaemon)
        return false;
    }

    boolean this_present_traceTime = true;
    boolean that_present_traceTime = true;
    if (this_present_traceTime || that_present_traceTime) {
      if (!(this_present_traceTime && that_present_traceTime))
        return false;
      if (this.traceTime != that.traceTime)
        return false;
    }

    boolean this_present_stackTrace = true && this.isSetStackTrace();
    boolean that_present_stackTrace = true && that.isSetStackTrace();
    if (this_present_stackTrace || that_present_stackTrace) {
      if (!(this_present_stackTrace && that_present_stackTrace))
        return false;
      if (!this.stackTrace.equals(that.stackTrace))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  @Override
  public int compareTo(ThreadInfoStruct other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetThreadId()).compareTo(other.isSetThreadId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetThreadId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.threadId, other.threadId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetName()).compareTo(other.isSetName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.name, other.name);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetStatus()).compareTo(other.isSetStatus());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStatus()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.status, other.status);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTimeId()).compareTo(other.isSetTimeId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTimeId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.timeId, other.timeId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUpTime()).compareTo(other.isSetUpTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUpTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.upTime, other.upTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetStartTime()).compareTo(other.isSetStartTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStartTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.startTime, other.startTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIsDaemon()).compareTo(other.isSetIsDaemon());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIsDaemon()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.isDaemon, other.isDaemon);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTraceTime()).compareTo(other.isSetTraceTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTraceTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.traceTime, other.traceTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetStackTrace()).compareTo(other.isSetStackTrace());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStackTrace()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.stackTrace, other.stackTrace);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("ThreadInfoStruct(");
    boolean first = true;

    sb.append("threadId:");
    sb.append(this.threadId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("name:");
    if (this.name == null) {
      sb.append("null");
    } else {
      sb.append(this.name);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("status:");
    sb.append(this.status);
    first = false;
    if (!first) sb.append(", ");
    sb.append("timeId:");
    sb.append(this.timeId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("upTime:");
    sb.append(this.upTime);
    first = false;
    if (!first) sb.append(", ");
    sb.append("startTime:");
    sb.append(this.startTime);
    first = false;
    if (!first) sb.append(", ");
    sb.append("isDaemon:");
    sb.append(this.isDaemon);
    first = false;
    if (!first) sb.append(", ");
    sb.append("traceTime:");
    sb.append(this.traceTime);
    first = false;
    if (isSetStackTrace()) {
      if (!first) sb.append(", ");
      sb.append("stackTrace:");
      if (this.stackTrace == null) {
        sb.append("null");
      } else {
        sb.append(this.stackTrace);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (!isSetThreadId()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'threadId' is unset! Struct:" + toString());
    }

    if (!isSetName()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'name' is unset! Struct:" + toString());
    }

    if (!isSetStatus()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'status' is unset! Struct:" + toString());
    }

    if (!isSetTimeId()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'timeId' is unset! Struct:" + toString());
    }

    if (!isSetUpTime()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'upTime' is unset! Struct:" + toString());
    }

    if (!isSetStartTime()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'startTime' is unset! Struct:" + toString());
    }

    if (!isSetIsDaemon()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'isDaemon' is unset! Struct:" + toString());
    }

    if (!isSetTraceTime()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'traceTime' is unset! Struct:" + toString());
    }

    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class ThreadInfoStructStandardSchemeFactory implements SchemeFactory {
    public ThreadInfoStructStandardScheme getScheme() {
      return new ThreadInfoStructStandardScheme();
    }
  }

  private static class ThreadInfoStructStandardScheme extends StandardScheme<ThreadInfoStruct> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, ThreadInfoStruct struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // THREAD_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.threadId = iprot.readI32();
              struct.setThreadIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.name = iprot.readString();
              struct.setNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // STATUS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.status = iprot.readI32();
              struct.setStatusIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // TIME_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.timeId = iprot.readI32();
              struct.setTimeIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // UP_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.upTime = iprot.readI32();
              struct.setUpTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // START_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.startTime = iprot.readI32();
              struct.setStartTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // IS_DAEMON
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.isDaemon = iprot.readBool();
              struct.setIsDaemonIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // TRACE_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.traceTime = iprot.readI64();
              struct.setTraceTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // STACK_TRACE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.stackTrace = iprot.readString();
              struct.setStackTraceIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, ThreadInfoStruct struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(THREAD_ID_FIELD_DESC);
      oprot.writeI32(struct.threadId);
      oprot.writeFieldEnd();
      if (struct.name != null) {
        oprot.writeFieldBegin(NAME_FIELD_DESC);
        oprot.writeString(struct.name);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(STATUS_FIELD_DESC);
      oprot.writeI32(struct.status);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(TIME_ID_FIELD_DESC);
      oprot.writeI32(struct.timeId);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(UP_TIME_FIELD_DESC);
      oprot.writeI32(struct.upTime);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(START_TIME_FIELD_DESC);
      oprot.writeI32(struct.startTime);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(IS_DAEMON_FIELD_DESC);
      oprot.writeBool(struct.isDaemon);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(TRACE_TIME_FIELD_DESC);
      oprot.writeI64(struct.traceTime);
      oprot.writeFieldEnd();
      if (struct.stackTrace != null) {
        if (struct.isSetStackTrace()) {
          oprot.writeFieldBegin(STACK_TRACE_FIELD_DESC);
          oprot.writeString(struct.stackTrace);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class ThreadInfoStructTupleSchemeFactory implements SchemeFactory {
    public ThreadInfoStructTupleScheme getScheme() {
      return new ThreadInfoStructTupleScheme();
    }
  }

  private static class ThreadInfoStructTupleScheme extends TupleScheme<ThreadInfoStruct> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, ThreadInfoStruct struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      oprot.writeI32(struct.threadId);
      oprot.writeString(struct.name);
      oprot.writeI32(struct.status);
      oprot.writeI32(struct.timeId);
      oprot.writeI32(struct.upTime);
      oprot.writeI32(struct.startTime);
      oprot.writeBool(struct.isDaemon);
      oprot.writeI64(struct.traceTime);
      BitSet optionals = new BitSet();
      if (struct.isSetStackTrace()) {
        optionals.set(0);
      }
      oprot.writeBitSet(optionals, 1);
      if (struct.isSetStackTrace()) {
        oprot.writeString(struct.stackTrace);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, ThreadInfoStruct struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      struct.threadId = iprot.readI32();
      struct.setThreadIdIsSet(true);
      struct.name = iprot.readString();
      struct.setNameIsSet(true);
      struct.status = iprot.readI32();
      struct.setStatusIsSet(true);
      struct.timeId = iprot.readI32();
      struct.setTimeIdIsSet(true);
      struct.upTime = iprot.readI32();
      struct.setUpTimeIsSet(true);
      struct.startTime = iprot.readI32();
      struct.setStartTimeIsSet(true);
      struct.isDaemon = iprot.readBool();
      struct.setIsDaemonIsSet(true);
      struct.traceTime = iprot.readI64();
      struct.setTraceTimeIsSet(true);
      BitSet incoming = iprot.readBitSet(1);
      if (incoming.get(0)) {
        struct.stackTrace = iprot.readString();
        struct.setStackTraceIsSet(true);
      }
    }
  }

}

