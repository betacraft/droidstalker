/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.rc.droid_stalker.thrift;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class DroidStalkerAppService {

  /**
   * DroidStalkerAppService that will run inside a service in our Android Application
   */
  public interface Iface {

    /**
     * Method to get installed apps from device
     */
    public Set<com.rc.droid_stalker.thrift.AndroidAppStruct> getInstalledApps() throws DroidStalkerAppException, org.apache.thrift.TException;

    /**
     * Method to get CPU stats associated with a pid
     * 
     * 
     * @param pid
     * @param span
     */
    public com.rc.droid_stalker.thrift.CPUStatsStruct getCPUStatsFor(int pid, int span) throws DroidStalkerAppException, org.apache.thrift.TException;

  }

  public interface AsyncIface {

    public void getInstalledApps(org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getCPUStatsFor(int pid, int span, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

  }

  public static class Client extends org.apache.thrift.TServiceClient implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public Set<com.rc.droid_stalker.thrift.AndroidAppStruct> getInstalledApps() throws DroidStalkerAppException, org.apache.thrift.TException
    {
      send_getInstalledApps();
      return recv_getInstalledApps();
    }

    public void send_getInstalledApps() throws org.apache.thrift.TException
    {
      getInstalledApps_args args = new getInstalledApps_args();
      sendBase("getInstalledApps", args);
    }

    public Set<com.rc.droid_stalker.thrift.AndroidAppStruct> recv_getInstalledApps() throws DroidStalkerAppException, org.apache.thrift.TException
    {
      getInstalledApps_result result = new getInstalledApps_result();
      receiveBase(result, "getInstalledApps");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.appException != null) {
        throw result.appException;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getInstalledApps failed: unknown result");
    }

    public com.rc.droid_stalker.thrift.CPUStatsStruct getCPUStatsFor(int pid, int span) throws DroidStalkerAppException, org.apache.thrift.TException
    {
      send_getCPUStatsFor(pid, span);
      return recv_getCPUStatsFor();
    }

    public void send_getCPUStatsFor(int pid, int span) throws org.apache.thrift.TException
    {
      getCPUStatsFor_args args = new getCPUStatsFor_args();
      args.setPid(pid);
      args.setSpan(span);
      sendBase("getCPUStatsFor", args);
    }

    public com.rc.droid_stalker.thrift.CPUStatsStruct recv_getCPUStatsFor() throws DroidStalkerAppException, org.apache.thrift.TException
    {
      getCPUStatsFor_result result = new getCPUStatsFor_result();
      receiveBase(result, "getCPUStatsFor");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.appException != null) {
        throw result.appException;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getCPUStatsFor failed: unknown result");
    }

  }
  public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void getInstalledApps(org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getInstalledApps_call method_call = new getInstalledApps_call(resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getInstalledApps_call extends org.apache.thrift.async.TAsyncMethodCall {
      public getInstalledApps_call(org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getInstalledApps", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getInstalledApps_args args = new getInstalledApps_args();
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Set<com.rc.droid_stalker.thrift.AndroidAppStruct> getResult() throws DroidStalkerAppException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getInstalledApps();
      }
    }

    public void getCPUStatsFor(int pid, int span, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getCPUStatsFor_call method_call = new getCPUStatsFor_call(pid, span, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getCPUStatsFor_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int pid;
      private int span;
      public getCPUStatsFor_call(int pid, int span, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.pid = pid;
        this.span = span;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getCPUStatsFor", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getCPUStatsFor_args args = new getCPUStatsFor_args();
        args.setPid(pid);
        args.setSpan(span);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public com.rc.droid_stalker.thrift.CPUStatsStruct getResult() throws DroidStalkerAppException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getCPUStatsFor();
      }
    }

  }

  public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor<I> implements org.apache.thrift.TProcessor {
    private static final Logger LOGGER = LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> getProcessMap(Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("getInstalledApps", new getInstalledApps());
      processMap.put("getCPUStatsFor", new getCPUStatsFor());
      return processMap;
    }

    public static class getInstalledApps<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getInstalledApps_args> {
      public getInstalledApps() {
        super("getInstalledApps");
      }

      public getInstalledApps_args getEmptyArgsInstance() {
        return new getInstalledApps_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getInstalledApps_result getResult(I iface, getInstalledApps_args args) throws org.apache.thrift.TException {
        getInstalledApps_result result = new getInstalledApps_result();
        try {
          result.success = iface.getInstalledApps();
        } catch (DroidStalkerAppException appException) {
          result.appException = appException;
        }
        return result;
      }
    }

    public static class getCPUStatsFor<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getCPUStatsFor_args> {
      public getCPUStatsFor() {
        super("getCPUStatsFor");
      }

      public getCPUStatsFor_args getEmptyArgsInstance() {
        return new getCPUStatsFor_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getCPUStatsFor_result getResult(I iface, getCPUStatsFor_args args) throws org.apache.thrift.TException {
        getCPUStatsFor_result result = new getCPUStatsFor_result();
        try {
          result.success = iface.getCPUStatsFor(args.pid, args.span);
        } catch (DroidStalkerAppException appException) {
          result.appException = appException;
        }
        return result;
      }
    }

  }

  public static class AsyncProcessor<I extends AsyncIface> extends org.apache.thrift.TBaseAsyncProcessor<I> {
    private static final Logger LOGGER = LoggerFactory.getLogger(AsyncProcessor.class.getName());
    public AsyncProcessor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>>()));
    }

    protected AsyncProcessor(I iface, Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends AsyncIface> Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase,?>> getProcessMap(Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      processMap.put("getInstalledApps", new getInstalledApps());
      processMap.put("getCPUStatsFor", new getCPUStatsFor());
      return processMap;
    }

    public static class getInstalledApps<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getInstalledApps_args, Set<com.rc.droid_stalker.thrift.AndroidAppStruct>> {
      public getInstalledApps() {
        super("getInstalledApps");
      }

      public getInstalledApps_args getEmptyArgsInstance() {
        return new getInstalledApps_args();
      }

      public AsyncMethodCallback<Set<com.rc.droid_stalker.thrift.AndroidAppStruct>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Set<com.rc.droid_stalker.thrift.AndroidAppStruct>>() { 
          public void onComplete(Set<com.rc.droid_stalker.thrift.AndroidAppStruct> o) {
            getInstalledApps_result result = new getInstalledApps_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getInstalledApps_result result = new getInstalledApps_result();
            if (e instanceof DroidStalkerAppException) {
                        result.appException = (DroidStalkerAppException) e;
                        result.setAppExceptionIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getInstalledApps_args args, org.apache.thrift.async.AsyncMethodCallback<Set<com.rc.droid_stalker.thrift.AndroidAppStruct>> resultHandler) throws TException {
        iface.getInstalledApps(resultHandler);
      }
    }

    public static class getCPUStatsFor<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getCPUStatsFor_args, com.rc.droid_stalker.thrift.CPUStatsStruct> {
      public getCPUStatsFor() {
        super("getCPUStatsFor");
      }

      public getCPUStatsFor_args getEmptyArgsInstance() {
        return new getCPUStatsFor_args();
      }

      public AsyncMethodCallback<com.rc.droid_stalker.thrift.CPUStatsStruct> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<com.rc.droid_stalker.thrift.CPUStatsStruct>() { 
          public void onComplete(com.rc.droid_stalker.thrift.CPUStatsStruct o) {
            getCPUStatsFor_result result = new getCPUStatsFor_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getCPUStatsFor_result result = new getCPUStatsFor_result();
            if (e instanceof DroidStalkerAppException) {
                        result.appException = (DroidStalkerAppException) e;
                        result.setAppExceptionIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getCPUStatsFor_args args, org.apache.thrift.async.AsyncMethodCallback<com.rc.droid_stalker.thrift.CPUStatsStruct> resultHandler) throws TException {
        iface.getCPUStatsFor(args.pid, args.span,resultHandler);
      }
    }

  }

  public static class getInstalledApps_args implements org.apache.thrift.TBase<getInstalledApps_args, getInstalledApps_args._Fields>, java.io.Serializable, Cloneable, Comparable<getInstalledApps_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getInstalledApps_args");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getInstalledApps_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getInstalledApps_argsTupleSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getInstalledApps_args.class, metaDataMap);
    }

    public getInstalledApps_args() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getInstalledApps_args(getInstalledApps_args other) {
    }

    public getInstalledApps_args deepCopy() {
      return new getInstalledApps_args(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getInstalledApps_args)
        return this.equals((getInstalledApps_args)that);
      return false;
    }

    public boolean equals(getInstalledApps_args that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(getInstalledApps_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getInstalledApps_args(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getInstalledApps_argsStandardSchemeFactory implements SchemeFactory {
      public getInstalledApps_argsStandardScheme getScheme() {
        return new getInstalledApps_argsStandardScheme();
      }
    }

    private static class getInstalledApps_argsStandardScheme extends StandardScheme<getInstalledApps_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getInstalledApps_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getInstalledApps_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getInstalledApps_argsTupleSchemeFactory implements SchemeFactory {
      public getInstalledApps_argsTupleScheme getScheme() {
        return new getInstalledApps_argsTupleScheme();
      }
    }

    private static class getInstalledApps_argsTupleScheme extends TupleScheme<getInstalledApps_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getInstalledApps_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getInstalledApps_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

  public static class getInstalledApps_result implements org.apache.thrift.TBase<getInstalledApps_result, getInstalledApps_result._Fields>, java.io.Serializable, Cloneable, Comparable<getInstalledApps_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getInstalledApps_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.SET, (short)0);
    private static final org.apache.thrift.protocol.TField APP_EXCEPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("appException", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getInstalledApps_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getInstalledApps_resultTupleSchemeFactory());
    }

    private Set<com.rc.droid_stalker.thrift.AndroidAppStruct> success; // required
    private DroidStalkerAppException appException; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      APP_EXCEPTION((short)1, "appException");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // APP_EXCEPTION
            return APP_EXCEPTION;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.SetMetaData(org.apache.thrift.protocol.TType.SET, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.rc.droid_stalker.thrift.AndroidAppStruct.class))));
      tmpMap.put(_Fields.APP_EXCEPTION, new org.apache.thrift.meta_data.FieldMetaData("appException", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getInstalledApps_result.class, metaDataMap);
    }

    public getInstalledApps_result() {
    }

    public getInstalledApps_result(
      Set<com.rc.droid_stalker.thrift.AndroidAppStruct> success,
      DroidStalkerAppException appException)
    {
      this();
      this.success = success;
      this.appException = appException;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getInstalledApps_result(getInstalledApps_result other) {
      if (other.isSetSuccess()) {
        Set<com.rc.droid_stalker.thrift.AndroidAppStruct> __this__success = new HashSet<com.rc.droid_stalker.thrift.AndroidAppStruct>(other.success.size());
        for (com.rc.droid_stalker.thrift.AndroidAppStruct other_element : other.success) {
          __this__success.add(new com.rc.droid_stalker.thrift.AndroidAppStruct(other_element));
        }
        this.success = __this__success;
      }
      if (other.isSetAppException()) {
        this.appException = new DroidStalkerAppException(other.appException);
      }
    }

    public getInstalledApps_result deepCopy() {
      return new getInstalledApps_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.appException = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<com.rc.droid_stalker.thrift.AndroidAppStruct> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(com.rc.droid_stalker.thrift.AndroidAppStruct elem) {
      if (this.success == null) {
        this.success = new HashSet<com.rc.droid_stalker.thrift.AndroidAppStruct>();
      }
      this.success.add(elem);
    }

    public Set<com.rc.droid_stalker.thrift.AndroidAppStruct> getSuccess() {
      return this.success;
    }

    public void setSuccess(Set<com.rc.droid_stalker.thrift.AndroidAppStruct> success) {
      this.success = success;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public DroidStalkerAppException getAppException() {
      return this.appException;
    }

    public void setAppException(DroidStalkerAppException appException) {
      this.appException = appException;
    }

    public void unsetAppException() {
      this.appException = null;
    }

    /** Returns true if field appException is set (has been assigned a value) and false otherwise */
    public boolean isSetAppException() {
      return this.appException != null;
    }

    public void setAppExceptionIsSet(boolean value) {
      if (!value) {
        this.appException = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Set<com.rc.droid_stalker.thrift.AndroidAppStruct>)value);
        }
        break;

      case APP_EXCEPTION:
        if (value == null) {
          unsetAppException();
        } else {
          setAppException((DroidStalkerAppException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case APP_EXCEPTION:
        return getAppException();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case APP_EXCEPTION:
        return isSetAppException();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getInstalledApps_result)
        return this.equals((getInstalledApps_result)that);
      return false;
    }

    public boolean equals(getInstalledApps_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_appException = true && this.isSetAppException();
      boolean that_present_appException = true && that.isSetAppException();
      if (this_present_appException || that_present_appException) {
        if (!(this_present_appException && that_present_appException))
          return false;
        if (!this.appException.equals(that.appException))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(getInstalledApps_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetAppException()).compareTo(other.isSetAppException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAppException()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.appException, other.appException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getInstalledApps_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("appException:");
      if (this.appException == null) {
        sb.append("null");
      } else {
        sb.append(this.appException);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getInstalledApps_resultStandardSchemeFactory implements SchemeFactory {
      public getInstalledApps_resultStandardScheme getScheme() {
        return new getInstalledApps_resultStandardScheme();
      }
    }

    private static class getInstalledApps_resultStandardScheme extends StandardScheme<getInstalledApps_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getInstalledApps_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.SET) {
                {
                  org.apache.thrift.protocol.TSet _set0 = iprot.readSetBegin();
                  struct.success = new HashSet<com.rc.droid_stalker.thrift.AndroidAppStruct>(2*_set0.size);
                  for (int _i1 = 0; _i1 < _set0.size; ++_i1)
                  {
                    com.rc.droid_stalker.thrift.AndroidAppStruct _elem2;
                    _elem2 = new com.rc.droid_stalker.thrift.AndroidAppStruct();
                    _elem2.read(iprot);
                    struct.success.add(_elem2);
                  }
                  iprot.readSetEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // APP_EXCEPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.appException = new DroidStalkerAppException();
                struct.appException.read(iprot);
                struct.setAppExceptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getInstalledApps_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeSetBegin(new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (com.rc.droid_stalker.thrift.AndroidAppStruct _iter3 : struct.success)
            {
              _iter3.write(oprot);
            }
            oprot.writeSetEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.appException != null) {
          oprot.writeFieldBegin(APP_EXCEPTION_FIELD_DESC);
          struct.appException.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getInstalledApps_resultTupleSchemeFactory implements SchemeFactory {
      public getInstalledApps_resultTupleScheme getScheme() {
        return new getInstalledApps_resultTupleScheme();
      }
    }

    private static class getInstalledApps_resultTupleScheme extends TupleScheme<getInstalledApps_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getInstalledApps_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetAppException()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (com.rc.droid_stalker.thrift.AndroidAppStruct _iter4 : struct.success)
            {
              _iter4.write(oprot);
            }
          }
        }
        if (struct.isSetAppException()) {
          struct.appException.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getInstalledApps_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TSet _set5 = new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new HashSet<com.rc.droid_stalker.thrift.AndroidAppStruct>(2*_set5.size);
            for (int _i6 = 0; _i6 < _set5.size; ++_i6)
            {
              com.rc.droid_stalker.thrift.AndroidAppStruct _elem7;
              _elem7 = new com.rc.droid_stalker.thrift.AndroidAppStruct();
              _elem7.read(iprot);
              struct.success.add(_elem7);
            }
          }
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.appException = new DroidStalkerAppException();
          struct.appException.read(iprot);
          struct.setAppExceptionIsSet(true);
        }
      }
    }

  }

  public static class getCPUStatsFor_args implements org.apache.thrift.TBase<getCPUStatsFor_args, getCPUStatsFor_args._Fields>, java.io.Serializable, Cloneable, Comparable<getCPUStatsFor_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getCPUStatsFor_args");

    private static final org.apache.thrift.protocol.TField PID_FIELD_DESC = new org.apache.thrift.protocol.TField("pid", org.apache.thrift.protocol.TType.I32, (short)1);
    private static final org.apache.thrift.protocol.TField SPAN_FIELD_DESC = new org.apache.thrift.protocol.TField("span", org.apache.thrift.protocol.TType.I32, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getCPUStatsFor_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getCPUStatsFor_argsTupleSchemeFactory());
    }

    private int pid; // required
    private int span; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      PID((short)1, "pid"),
      SPAN((short)2, "span");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // PID
            return PID;
          case 2: // SPAN
            return SPAN;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __PID_ISSET_ID = 0;
    private static final int __SPAN_ISSET_ID = 1;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.PID, new org.apache.thrift.meta_data.FieldMetaData("pid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.SPAN, new org.apache.thrift.meta_data.FieldMetaData("span", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getCPUStatsFor_args.class, metaDataMap);
    }

    public getCPUStatsFor_args() {
    }

    public getCPUStatsFor_args(
      int pid,
      int span)
    {
      this();
      this.pid = pid;
      setPidIsSet(true);
      this.span = span;
      setSpanIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getCPUStatsFor_args(getCPUStatsFor_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.pid = other.pid;
      this.span = other.span;
    }

    public getCPUStatsFor_args deepCopy() {
      return new getCPUStatsFor_args(this);
    }

    @Override
    public void clear() {
      setPidIsSet(false);
      this.pid = 0;
      setSpanIsSet(false);
      this.span = 0;
    }

    public int getPid() {
      return this.pid;
    }

    public void setPid(int pid) {
      this.pid = pid;
      setPidIsSet(true);
    }

    public void unsetPid() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PID_ISSET_ID);
    }

    /** Returns true if field pid is set (has been assigned a value) and false otherwise */
    public boolean isSetPid() {
      return EncodingUtils.testBit(__isset_bitfield, __PID_ISSET_ID);
    }

    public void setPidIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PID_ISSET_ID, value);
    }

    public int getSpan() {
      return this.span;
    }

    public void setSpan(int span) {
      this.span = span;
      setSpanIsSet(true);
    }

    public void unsetSpan() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SPAN_ISSET_ID);
    }

    /** Returns true if field span is set (has been assigned a value) and false otherwise */
    public boolean isSetSpan() {
      return EncodingUtils.testBit(__isset_bitfield, __SPAN_ISSET_ID);
    }

    public void setSpanIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SPAN_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case PID:
        if (value == null) {
          unsetPid();
        } else {
          setPid((Integer)value);
        }
        break;

      case SPAN:
        if (value == null) {
          unsetSpan();
        } else {
          setSpan((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case PID:
        return Integer.valueOf(getPid());

      case SPAN:
        return Integer.valueOf(getSpan());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case PID:
        return isSetPid();
      case SPAN:
        return isSetSpan();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getCPUStatsFor_args)
        return this.equals((getCPUStatsFor_args)that);
      return false;
    }

    public boolean equals(getCPUStatsFor_args that) {
      if (that == null)
        return false;

      boolean this_present_pid = true;
      boolean that_present_pid = true;
      if (this_present_pid || that_present_pid) {
        if (!(this_present_pid && that_present_pid))
          return false;
        if (this.pid != that.pid)
          return false;
      }

      boolean this_present_span = true;
      boolean that_present_span = true;
      if (this_present_span || that_present_span) {
        if (!(this_present_span && that_present_span))
          return false;
        if (this.span != that.span)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(getCPUStatsFor_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetPid()).compareTo(other.isSetPid());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPid()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pid, other.pid);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetSpan()).compareTo(other.isSetSpan());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSpan()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.span, other.span);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getCPUStatsFor_args(");
      boolean first = true;

      sb.append("pid:");
      sb.append(this.pid);
      first = false;
      if (!first) sb.append(", ");
      sb.append("span:");
      sb.append(this.span);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getCPUStatsFor_argsStandardSchemeFactory implements SchemeFactory {
      public getCPUStatsFor_argsStandardScheme getScheme() {
        return new getCPUStatsFor_argsStandardScheme();
      }
    }

    private static class getCPUStatsFor_argsStandardScheme extends StandardScheme<getCPUStatsFor_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getCPUStatsFor_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // PID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.pid = iprot.readI32();
                struct.setPidIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // SPAN
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.span = iprot.readI32();
                struct.setSpanIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getCPUStatsFor_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(PID_FIELD_DESC);
        oprot.writeI32(struct.pid);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(SPAN_FIELD_DESC);
        oprot.writeI32(struct.span);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getCPUStatsFor_argsTupleSchemeFactory implements SchemeFactory {
      public getCPUStatsFor_argsTupleScheme getScheme() {
        return new getCPUStatsFor_argsTupleScheme();
      }
    }

    private static class getCPUStatsFor_argsTupleScheme extends TupleScheme<getCPUStatsFor_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getCPUStatsFor_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetPid()) {
          optionals.set(0);
        }
        if (struct.isSetSpan()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetPid()) {
          oprot.writeI32(struct.pid);
        }
        if (struct.isSetSpan()) {
          oprot.writeI32(struct.span);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getCPUStatsFor_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.pid = iprot.readI32();
          struct.setPidIsSet(true);
        }
        if (incoming.get(1)) {
          struct.span = iprot.readI32();
          struct.setSpanIsSet(true);
        }
      }
    }

  }

  public static class getCPUStatsFor_result implements org.apache.thrift.TBase<getCPUStatsFor_result, getCPUStatsFor_result._Fields>, java.io.Serializable, Cloneable, Comparable<getCPUStatsFor_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getCPUStatsFor_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField APP_EXCEPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("appException", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getCPUStatsFor_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getCPUStatsFor_resultTupleSchemeFactory());
    }

    private com.rc.droid_stalker.thrift.CPUStatsStruct success; // required
    private DroidStalkerAppException appException; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      APP_EXCEPTION((short)1, "appException");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // APP_EXCEPTION
            return APP_EXCEPTION;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.rc.droid_stalker.thrift.CPUStatsStruct.class)));
      tmpMap.put(_Fields.APP_EXCEPTION, new org.apache.thrift.meta_data.FieldMetaData("appException", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getCPUStatsFor_result.class, metaDataMap);
    }

    public getCPUStatsFor_result() {
    }

    public getCPUStatsFor_result(
      com.rc.droid_stalker.thrift.CPUStatsStruct success,
      DroidStalkerAppException appException)
    {
      this();
      this.success = success;
      this.appException = appException;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getCPUStatsFor_result(getCPUStatsFor_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.rc.droid_stalker.thrift.CPUStatsStruct(other.success);
      }
      if (other.isSetAppException()) {
        this.appException = new DroidStalkerAppException(other.appException);
      }
    }

    public getCPUStatsFor_result deepCopy() {
      return new getCPUStatsFor_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.appException = null;
    }

    public com.rc.droid_stalker.thrift.CPUStatsStruct getSuccess() {
      return this.success;
    }

    public void setSuccess(com.rc.droid_stalker.thrift.CPUStatsStruct success) {
      this.success = success;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public DroidStalkerAppException getAppException() {
      return this.appException;
    }

    public void setAppException(DroidStalkerAppException appException) {
      this.appException = appException;
    }

    public void unsetAppException() {
      this.appException = null;
    }

    /** Returns true if field appException is set (has been assigned a value) and false otherwise */
    public boolean isSetAppException() {
      return this.appException != null;
    }

    public void setAppExceptionIsSet(boolean value) {
      if (!value) {
        this.appException = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((com.rc.droid_stalker.thrift.CPUStatsStruct)value);
        }
        break;

      case APP_EXCEPTION:
        if (value == null) {
          unsetAppException();
        } else {
          setAppException((DroidStalkerAppException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case APP_EXCEPTION:
        return getAppException();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case APP_EXCEPTION:
        return isSetAppException();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getCPUStatsFor_result)
        return this.equals((getCPUStatsFor_result)that);
      return false;
    }

    public boolean equals(getCPUStatsFor_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_appException = true && this.isSetAppException();
      boolean that_present_appException = true && that.isSetAppException();
      if (this_present_appException || that_present_appException) {
        if (!(this_present_appException && that_present_appException))
          return false;
        if (!this.appException.equals(that.appException))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(getCPUStatsFor_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetAppException()).compareTo(other.isSetAppException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAppException()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.appException, other.appException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getCPUStatsFor_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("appException:");
      if (this.appException == null) {
        sb.append("null");
      } else {
        sb.append(this.appException);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getCPUStatsFor_resultStandardSchemeFactory implements SchemeFactory {
      public getCPUStatsFor_resultStandardScheme getScheme() {
        return new getCPUStatsFor_resultStandardScheme();
      }
    }

    private static class getCPUStatsFor_resultStandardScheme extends StandardScheme<getCPUStatsFor_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getCPUStatsFor_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new com.rc.droid_stalker.thrift.CPUStatsStruct();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // APP_EXCEPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.appException = new DroidStalkerAppException();
                struct.appException.read(iprot);
                struct.setAppExceptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getCPUStatsFor_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.appException != null) {
          oprot.writeFieldBegin(APP_EXCEPTION_FIELD_DESC);
          struct.appException.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getCPUStatsFor_resultTupleSchemeFactory implements SchemeFactory {
      public getCPUStatsFor_resultTupleScheme getScheme() {
        return new getCPUStatsFor_resultTupleScheme();
      }
    }

    private static class getCPUStatsFor_resultTupleScheme extends TupleScheme<getCPUStatsFor_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getCPUStatsFor_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetAppException()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
        if (struct.isSetAppException()) {
          struct.appException.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getCPUStatsFor_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = new com.rc.droid_stalker.thrift.CPUStatsStruct();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.appException = new DroidStalkerAppException();
          struct.appException.read(iprot);
          struct.setAppExceptionIsSet(true);
        }
      }
    }

  }

}
